// 501. 二叉搜索树中的众数
// 给定一个有相同值的二叉搜索树（BST），找出 BST 中的所有众数（出现频率最高的元素）。
//
// 假定 BST 有如下定义：
//
// 结点左子树中所含结点的值小于等于当前结点的值
// 结点右子树中所含结点的值大于等于当前结点的值
// 左子树和右子树都是二叉搜索树
// 例如：
// 给定 BST [1,null,2,2],
//
//   1
//     \
//      2
//      /
//      2
// 返回[2].
//
//   提示：如果众数超过1个，不需考虑输出顺序
//
// 进阶：你可以不使用额外的空间吗？（假设由递归产生的隐式调用栈的开销不被计算在内）

/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */

/**
 * @param {TreeNode} root
 * @return {number[]}
 */
var findMode = function(root) {
  if (!root) return []
  let result = new Set()
  let maxCount = 0
  let count = 0
  let prev
  let cur
  let dfs = function (node) {
    node.left && dfs(node.left)
    cur = node.val
    if (prev === void 0) { // 第一个节点
      count = 1
    } else if (prev === cur) { // 相同节点
      count++
    } else { // 不同节点
      count = 1
    }
    // 更新prev
    prev = cur
    if (count === maxCount) {
      result.add(cur)
    } else if (count > maxCount) {
      result.clear()
      maxCount = count
      result.add(cur)
    }
    node.right && dfs(node.right)
  }
  dfs(root)
  return Array.from(result)
};

// 解题思路
// 除了result，使用O(1)的空间解题，因为是搜索二叉树，其中序遍历一定是递增的，相同的数字一定是连续的
// 我们用count记录当前数字出现的次数，prev记录上一个节点，cur记录当前节点，maxCount记录当前出现次数最多的节点
// 当count大于maxCount时需要更新maxCount，并且清除result中的内容，因为出现了出现次数更多的数字
