// 106. 从中序与后序遍历序列构造二叉树
// 根据一棵树的中序遍历与后序遍历构造二叉树。
//
// 注意:
//   你可以假设树中没有重复的元素。
//
// 例如，给出
//
// 中序遍历 inorder = [9,3,15,20,7]
// 后序遍历 postorder = [9,15,7,20,3]
// 返回如下的二叉树：
//
//      3
//     / \
//    9  20
//  /  \
// 15   7

/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {number[]} inorder
 * @param {number[]} postorder
 * @return {TreeNode}
 */
var buildTree = function(inorder, postorder) {
  // inorder = [9,3,15,20,7] 前序
  // postorder = [9,15,7,20,3] 后序
  let back_idx = postorder.length - 1
  let inorderMap = new Map()
  // 存储中序遍历的每个位置
  inorder.forEach((val, index) => inorderMap.set(val, index))
  let helper = function (left_idx, right_idx) {
    if (left_idx > right_idx) return null
    let val = postorder[back_idx]
    let root = new TreeNode(val)
    let index = inorderMap.get(val)

    back_idx--
    root.right = helper(index + 1, right_idx)
    root.left = helper(left_idx, index - 1)
    return root
  }

  return helper(0, inorder.length - 1)
};

// 解题思路
// 巧妙
// 中序+前序 或者 中序+后序 都能确定唯一一颗二叉树
//
