// 剑指 Offer 14- I. 剪绳子
// 给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n>1并且m>1），每段绳子的长度记为 k[0],k[1]...k[m-1] 。请问 k[0]*k[1]*...*k[m-1] 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。

// 示例 1：

// 输入: 2
// 输出: 1
// 解释: 2 = 1 + 1, 1 × 1 = 1
// 示例 2:

// 输入: 10
// 输出: 36
// 解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36
// 提示：

// 2 <= n <= 58
/**
 * @param {number} n
 * @return {number}
 */
var cuttingRope = function(n) {
  if (n === 2) return 1
  if (n === 3) return 2
  let arr = []
  while (n >= 3) {
    arr.push(3)
    n -= 3
  }
  if (n === 1 && arr.length) {
    let temp = arr.pop()
    arr.push(temp + 1)
  } else if (n === 2) {
    arr.push(n)
  }
  return arr.reduce((a, b) => a * b)
};

// 解题思路：
// 需证明当 a1+a2+...+an=n 时 Max(a1*a2*...*an) 最大的情况
// 由于算术几何均值不等式已知，当长度固定时，均等分之后得到的乘积最大
// 当每段长度为x，分为a段，即n=ax，题目转化为即证明x的x分之1次方在x为几时最大，（证明过程需要求导，得到x在等于e即2.7时值最大），因此应该以3为临界点，分情况处理
// 所以，在保证3个数最多的情况下，判断剩余的值，如果剩1，则替换其中一个3为4，若剩余2，则直接乘2即可
